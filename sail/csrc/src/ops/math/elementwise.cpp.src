#include <iostream>

#include "../../Tensor.h"
#include "../../autograd/autograd.h"
#include "../../factories.h"
#include "../../kernels/kernel.h"
#include "elementwise.h"
#include "tools.h"

#define MAX(a, b) (((a.ndim) > (b.ndim)) ? (a) : (b))
#define MIN(a, b) (((a.ndim) < (b.ndim)) ? (a) : (b))

namespace sail {

namespace ops {
using TensorVector = std::vector<Tensor>;

/** begin block
 * name = [add, subtract, divide, multiply]
 * kName = [Add, Sub, Divide, Multiply]
 * agName = [Add, Subtract, Divide, Multiply]
 */

Tensor $name$(const Tensor& tensor1, const Tensor& tensor2) {
    // std::cout << &tensor1 << std::endl;
    // TensorShape s = tensor1.get_shape();
    // Tensor empty_tensor = empty(s.ndim(), tensor1.get_dtype(), s);

    if (tensor1.requires_grad || tensor2.requires_grad) {
        // empty_tensor = (new autograd::$agName$())->apply({&tensor1,
        // &tensor2});
        TensorVector vec;
        vec.emplace_back(tensor1);
        vec.emplace_back(tensor2);
        Tensor empty_tensor = (new autograd::$agName$())->apply(vec);

        // std::endl;

        return empty_tensor;
    }

    Tensor empty_tensor = empty_like(tensor1);

    bool broadcast = must_broadcast(tensor1, tensor2);
    if (broadcast) {
        std::vector<long> new_ =
            merge_shapes(tensor1.get_shape().shape, tensor2.get_shape().shape);
        TensorShape s = TensorShape(new_);
        empty_tensor.set_shape(s);
    }

    bool t1_scalar = tensor1.is_scalar();
    bool t2_scalar = tensor2.is_scalar();

    if ((t1_scalar && t2_scalar) || (!t1_scalar && !t2_scalar)) {
        $kName$TTKernel().execute(tensor1, tensor2, empty_tensor, broadcast);
    } else if (t1_scalar && !t2_scalar) {
        // empty_tensor = empty(s.ndim(), tensor2.get_dtype(), s);
        $kName$TSKernel().execute(tensor2, tensor1, empty_tensor, broadcast);
    } else {
        // empty_tensor = empty(s.ndim(), tensor1.get_dtype(), s);
        $kName$TSKernel().execute(tensor1, tensor2, empty_tensor, broadcast);
    }

    return empty_tensor;
}

/** end block **/

}  // namespace ops

}  // namespace sail
