cmake_minimum_required(VERSION 2.8)
project(sail_c LANGUAGES CXX) # CUDA
# find_package(CUDA REQUIRED)

file(GLOB_RECURSE headers CONFIGURE_DEPENDS "*.h")
file(GLOB_RECURSE files CONFIGURE_DEPENDS "*.cpp")

include(FindBLAS)

add_library(src STATIC ${headers} ${files} )#"cuda/cuda_math.h" "cuda/cuda_math.cu")
# if (Atlas_FOUND) 
# include_directories(${Atlas_INCLUDE_DIRS})
# target_include_directories(src PUBLIC ${Atlas_INCLUDE_DIRS})
# target_link_libraries(src PUBLIC ${Atlas_LIBRARIES})

# else()
# message(WARNING "Atlas not found")
# endif()
if (MKL_FOUND) 
# message(STATUS ${MKL_INCLUDE_DIR})
message(STATUS ${MKL_LIBRARIES})
# message(STATUS ${MKL_OPENMP_LIBRARY})
# message(STATUS ${MKL_SCALAPACK_LIBRARIES})
# message(STATUS ${MKL_CDFT_LIBRARIES})
# include_directories(${MKL_INCLUDE_DIR})
target_include_directories(src PUBLIC ${MKL_INCLUDE_DIR})
target_link_libraries(src PUBLIC ${MKL_LIBRARIES})
# target_link_libraries(src PUBLIC ${avx2_library})
# target_link_libraries(src PUBLIC ${MKL_AVX_LIBRARIES})
# target_link_libraries(src ${MKL_OPENMP_LIBRARY})
# target_link_libraries(src ${MKL_SCALAPACK_LIBRARIES})
# target_link_libraries(src ${MKL_CDFT_LIBRARIES})

else()
message(WARNING "MKL not found")
endif()
target_include_directories(src PRIVATE "../libs/xsimd/include")
# if (BLAS_FOUND)
#     target_compile_options(src PRIVATE ${BLAS_LINKER_FLAGS})
#     target_link_libraries(src ${BLAS_LIBRARIES})
# endif ()
