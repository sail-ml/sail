from typing import Any, ClassVar, ModuleType
from typing import overload
from typing import List, Set, Dict, Tuple, Optional

import numpy as np 
import sail

bool_: sail.dtype
float32: sail.dtype
float64: sail.dtype
int16: sail.dtype
int32: sail.dtype
int64: sail.dtype
int8: sail.dtype
uint16: sail.dtype
uint32: sail.dtype
uint64: sail.dtype
uint8: sail.dtype

random: ModuleType

class DimensionError(sail.SailError): ...

class SailError(Exception): ...

class Tensor:
    grad: ClassVar[None] = ...
    ndim: ClassVar[None] = ...
    requires_grad: ClassVar[None] = ...
    shape: ClassVar[None] = ...
    __hash__: ClassVar[None] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def astype(self, *args, **kwargs) -> Any: ...
    @overload
    def backward() -> None: ...
    def get_grad(self, *args, **kwargs) -> Any: ...
    def numpy() -> np.typing.ArrayLike: ...
    def __add__(self, other) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __getitem__(self, index) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __len__(self) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __mul__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __neg__(self) -> Any: ...
    def __radd__(self, other) -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __rsub__(self, other) -> Any: ...
    def __rtruediv__(self, other) -> Any: ...
    def __sub__(self, other) -> Any: ...
    def __truediv__(self, other) -> Any: ...

class dtype: ...

{funcs}
