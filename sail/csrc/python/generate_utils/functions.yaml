add:
  new: true
  signatures:
    - add(Tensor x1,  Tensor x2)
  internal_calls: 
    - sail::ops::add(parser.tensor(0), parser.tensor(1))

subtract:
  new: true
  signatures:
    - subtract(Tensor x1,  Tensor x2)
  internal_calls: 
    - sail::ops::subtract(parser.tensor(0), parser.tensor(1))

divide:
  new: true
  signatures:
    - divide(Tensor x1,  Tensor x2)
  internal_calls: 
    - sail::ops::divide(parser.tensor(0), parser.tensor(1))

multiply:
  new: true
  signatures:
    - multiply(Tensor x1,  Tensor x2)
  internal_calls: 
    - sail::ops::multiply(parser.tensor(0), parser.tensor(1))
    
power:
  new: true
  signatures:
    - power(Tensor x1,  Tensor x2)
  internal_calls: 
    - sail::ops::power(parser.tensor(0), parser.tensor(1))


matmul:
  new: true
  signatures:
    - matmul(Tensor x1,  Tensor x2)
  internal_calls: 
    - sail::ops::matmul(parser.tensor(0), parser.tensor(1))

addmm:
  new: true
  signatures:
    - addmm(Tensor x1, Tensor x2, Tensor x3)
  internal_calls: 
    - sail::ops::addmm(parser.tensor(0), parser.tensor(1), parser.tensor(2))

log:
  new: true
  signatures:
    - log(Tensor x1)
  internal_calls: 
    - sail::ops::log(parser.tensor(0))

exp:
  new: true
  signatures:
    - exp(Tensor x1)
  internal_calls: 
    - sail::ops::exp(parser.tensor(0))

clip:
  new: true
  signatures:
    - clip(Tensor x1, float min, float max)
  internal_calls: 
    - sail::ops::clip(parser.tensor(0), parser.double_(1), parser.double_(2))

mean:
  new: true
  signatures:
    - mean(Tensor tensor, int axis = None, bool keepdims = false)
    - mean(Tensor tensor, IntList axis = None, bool keepdims = false)
  internal_calls:
    - sail::ops::mean(parser.tensor(0), parser.int_as_axis(1), parser.boolean(2))
    - sail::ops::mean(parser.tensor(0), parser.int_list_as_axis(1), parser.boolean(2))

sum:
  new: true
  signatures:
    - sum(Tensor tensor, int axis = None, bool keepdims = false)
    - sum(Tensor tensor, IntList axis = None, bool keepdims = false)
  internal_calls:
    - sail::ops::sum(parser.tensor(0), parser.int_as_axis(1), parser.boolean(2))
    - sail::ops::sum(parser.tensor(0), parser.int_list_as_axis(1), parser.boolean(2))

max:
  new: true
  signatures:
    - max(Tensor tensor, int axis = None, bool keepdims = false)
    - max(Tensor tensor, IntList axis = None, bool keepdims = false)
  internal_calls:
    - sail::ops::max(parser.tensor(0), parser.int_as_axis(1), parser.boolean(2))
    - sail::ops::max(parser.tensor(0), parser.int_list_as_axis(1), parser.boolean(2))

min:
  new: true
  signatures:
    - min(Tensor tensor, int axis = None, bool keepdims = false)
    - min(Tensor tensor, IntList axis = None, bool keepdims = false)
  internal_calls:
    - sail::ops::min(parser.tensor(0), parser.int_as_axis(1), parser.boolean(2))
    - sail::ops::min(parser.tensor(0), parser.int_list_as_axis(1), parser.boolean(2))

tensordot:
  full_impl: |
      static PyObject* sail_tensordot(PyObject* self, PyObject* args, PyObject* kwargs) {

          START_EXCEPTION_HANDLING
          PyObject* t1;
          PyObject* t2;
          PyObject* tuple = Py_None;
          int v = 2;

          sail::Tensor tensor1;
          sail::Tensor tensor2;

          static char* kwlist[] = {"a", "b", "axes", NULL};

          if (!PyArg_ParseTupleAndKeywords(args, kwargs, "OO|O", kwlist, &t1, &t2,
                                          &tuple)) {
              PyErr_SetString(PyExc_TypeError, "incorrect arguments");
              return nullptr;
          }

          tensor1 = ((PyTensor*)t1)->tensor;
          tensor2 = ((PyTensor*)t2)->tensor;

          std::vector<long> axes_1;
          std::vector<long> axes_2;

          if (PyTuple_Check(tuple)) {
              PyObject* tuple1 = PyTuple_GetItem(tuple, 0);
              PyObject* tuple2 = PyTuple_GetItem(tuple, 1);

              tuple1 = PySequence_Tuple(tuple1);
              tuple2 = PySequence_Tuple(tuple2);

              int len = PyTuple_Size(tuple1);
              if (len == -1) {
                  axes_1 = {PyLong_AsLong(tuple1)};
              } else {
                  while (len--) {
                      axes_1.push_back(PyLong_AsLong(PyTuple_GetItem(tuple1, len)));
                  }
                  std::reverse(axes_1.begin(), axes_1.end());
              }
              len = PyTuple_Size(tuple2);
              if (len == -1) {
                  axes_2 = {PyLong_AsLong(tuple2)};
              } else {
                  while (len--) {
                      axes_2.push_back(PyLong_AsLong(PyTuple_GetItem(tuple2, len)));
                  }
                  std::reverse(axes_2.begin(), axes_2.end());
              }
          } else {
              if (PyLong_Check(tuple)) {
                  v = PyLong_AsLong(tuple);
              }
              for (int i = tensor1.get_ndim() - 1; i > (tensor1.get_ndim() - v - 1);
                  i--) {
                  axes_1.insert(axes_1.begin(), i);
              }

              for (int i = 0; i < v; i++) {
                  axes_2.push_back(i);
              }
          }

          PyTensor* ret_class;
          ret_class = (PyTensor*)PyTensorType.tp_alloc(&PyTensorType, 0);

          sail::Tensor res = sail::ops::tensordot(tensor1, tensor2, axes_1, axes_2);

          ret_class->tensor = res;

          return (PyObject*)ret_class;
          END_EXCEPTION_HANDLING
      }
      
      
      
broadcast_to:
  new: true
  signatures:
    - broadcast_to(Tensor t1, IntList new_shape)
  internal_calls:
    - sail::ops::broadcast_to(parser.tensor(0), parser.int_list(1))
  set_base:
    index: 0

reshape:
  new: true
  signatures:
    - reshape(Tensor t1, IntList new_shape)
    - reshape(Tensor t1, int new_shape)
  internal_calls:
    - sail::ops::reshape(parser.tensor(0), parser.int_list(1))
    - sail::ops::reshape(parser.tensor(0), parser.int_as_list(1))
  set_base:
    index: 0
  
transpose:
  new: true
  signatures:
    - transpose(Tensor t1, IntList order = None)
  internal_calls:
    - sail::ops::transpose(parser.tensor(0), parser.int_list(1))
  set_base:
    index: 0

expand_dims:
  new: true
  signatures:
    - expand_dims(Tensor t1, int axis = 0)
  internal_calls:
    - sail::ops::expand_dims(parser.tensor(0), parser.integer(1))
  set_base:
    index: 0

squeeze:
  new: true
  signatures:
    - squeeze(Tensor t1, int axis = 0)
  internal_calls:
    - sail::ops::squeeze(parser.tensor(0), parser.integer(1))
  set_base:
    index: 0


rollaxis:
  new: true
  signatures:
    - rollaxis(Tensor t1, int axis = 0, int position = 0)
  internal_calls:
    - sail::ops::rollaxis(parser.tensor(0), parser.integer(1), parser.integer(2))
  set_base:
    index: 0

moveaxis:
  new: true
  signatures:
    - moveaxis(Tensor t1, int axis = 0, int position = 0)
  internal_calls:
    - sail::ops::moveaxis(parser.tensor(0), parser.integer(1), parser.integer(2))
  set_base:
    index: 0

cat:
  new: true
  signatures:
    - cat(TensorList tensors, int axis = 0)
  internal_calls:
    - sail::ops::cat(parser.tensor_list(0), parser.integer(1))
    
    
stack:
  new: true
  signatures:
    - stack(TensorList tensors, int axis = 1)
  internal_calls:
    - sail::ops::stack(parser.tensor_list(0), parser.integer(1))

add_docstring:
  full_impl: |    
    static PyObject*
    sail_add_docstring(PyObject *unused, PyObject *args) {
        PyObject *obj;
        PyObject *str;
    #if PY_VERSION_HEX >= 0x030700A2 && \
        (!defined(PYPY_VERSION_NUM) || PYPY_VERSION_NUM > 0x07030300)
        const char *docstr;
    #else
        char *docstr;
    #endif
        static char *msg = "already has a different docstring";

        /* Don't add docstrings */
        if (Py_OptimizeFlag > 1) {
            Py_RETURN_NONE;
        }

        if (!PyArg_ParseTuple(args, "OO!:add_docstring", &obj, &PyUnicode_Type,
                              &str)) {
            return nullptr;
        }

        docstr = PyUnicode_AsUTF8(str);
        if (docstr == NULL) {
            return nullptr;
        }

    #define _ADDDOC(doc, name)                                           \
        if (!(doc)) {                                                    \
            doc = docstr;                                                \
            Py_INCREF(str); /* hold on to string (leaks reference) */    \
        } else if (strcmp(doc, docstr) != 0) {                           \
            PyErr_Format(PyExc_RuntimeError, "%s method %s", name, msg); \
            return nullptr;                                              \
        }

        if (Py_TYPE(obj) == &PyCFunction_Type) {
            PyCFunctionObject *new_ob = (PyCFunctionObject *)obj;
            _ADDDOC(new_ob->m_ml->ml_doc, new_ob->m_ml->ml_name);
        } else if (Py_TYPE(obj) == &PyType_Type) {
            PyTypeObject *new_ob = (PyTypeObject *)obj;
            _ADDDOC(new_ob->tp_doc, new_ob->tp_name);
        } else if (Py_TYPE(obj) == &PyMemberDescr_Type) {
            PyMemberDescrObject *new_ob = (PyMemberDescrObject *)obj;
            _ADDDOC(new_ob->d_member->doc, new_ob->d_member->name);
        } else if (Py_TYPE(obj) == &PyGetSetDescr_Type) {
            PyGetSetDescrObject *new_ob = (PyGetSetDescrObject *)obj;
            _ADDDOC(new_ob->d_getset->doc, new_ob->d_getset->name);
        } else if (Py_TYPE(obj) == &PyMethodDescr_Type) {
            PyMethodDescrObject *new_ob = (PyMethodDescrObject *)obj;
            _ADDDOC(new_ob->d_method->ml_doc, new_ob->d_method->ml_name);
        } else {
            PyObject *doc_attr;

            doc_attr = PyObject_GetAttrString(obj, "__doc__");
            if (doc_attr != NULL && doc_attr != Py_None &&
                (PyUnicode_Compare(doc_attr, str) != 0)) {
                Py_DECREF(doc_attr);
                if (PyErr_Occurred()) {
                    /* error during PyUnicode_Compare */
                    return nullptr;
                }
                PyErr_Format(PyExc_RuntimeError, "object %s", msg);
                return nullptr;
            }
            Py_XDECREF(doc_attr);

            if (PyObject_SetAttrString(obj, "__doc__", str) < 0) {
                PyErr_SetString(PyExc_TypeError,
                                "Cannot set a docstring for that object");
                return nullptr;
            }
            Py_RETURN_NONE;
        }

    #undef _ADDDOC

        Py_RETURN_NONE;
    }