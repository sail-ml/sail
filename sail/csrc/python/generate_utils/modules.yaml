
Linear:
  init:
    signature: Linear(int in_features, int out_features, bool use_bias=true)
  properties:
    weights: 
      type: Tensor
      write: True 
    biases:
      type: Tensor
      write: True 
  forward:
    signature: (Tensor x1)

Conv2D:
  init:
    custom: |
      PythonArgParser<6> parser = PythonArgParser<6>(
        {
            "Conv2D(int in_channels, int out_channels, int kernel_size, int strides = 1, string padding_mode = \"valid\", bool use_bias = false)",
            "Conv2D(int in_channels, int out_channels, IntList kernel_size, int strides = 1, string padding_mode = \"valid\", bool use_bias = false)",
            "Conv2D(int in_channels, int out_channels, int kernel_size, IntList strides = None, string padding_mode = \"valid\", bool use_bias = false)",
            "Conv2D(int in_channels, int out_channels, IntList kernel_size, IntList strides = None, string padding_mode = \"valid\", bool use_bias = false)",
        },
      args, kwargs);

      parser.parse();

      if (parser.at(0)) {
          self->module = (Module *)(new sail::modules::Conv2D(parser.integer(0),
                                                              parser.integer(1),
                                                              {parser.integer(2), parser.integer(2)},
                                                              {parser.integer(3), parser.integer(3)},
                                                              parser.string(4),
                                                              parser.boolean(5)));
      } else if (parser.at(1)) {
          self->module = (Module *)(new sail::modules::Conv2D(parser.integer(0),
                                                              parser.integer(1),
                                                              parser.int_list(2),
                                                              {parser.integer(3), parser.integer(3)},
                                                              parser.string(4),
                                                              parser.boolean(5)));

      } else if (parser.at(2)) {
        std::vector<long> strides = {(long)1, (long)1};
        if (!parser.isNone(3)) {
          strides = parser.int_list(3);
        }
          self->module = (Module *)(new sail::modules::Conv2D(parser.integer(0),
                                                              parser.integer(1),
                                                              {parser.integer(2), parser.integer(2)},
                                                              strides,
                                                              parser.string(4),
                                                              parser.boolean(5)));

      } else if (parser.at(3)) {
        std::vector<long> strides = {(long)1, (long)1};
        if (!parser.isNone(3)) {
          strides = parser.int_list(3);
        }
          self->module = (Module *)(new sail::modules::Conv2D(parser.integer(0),
                                                              parser.integer(1),
                                                              parser.int_list(2),
                                                              strides,
                                                              parser.string(4),
                                                              parser.boolean(5)));

      }

      return 0;
  properties:
    weights: 
      type: Tensor
      write: True 
    biases:
      type: Tensor
      write: True 
  forward:
    signature: (Tensor x1)

MaxPool2D:
  init:
    custom: |
      PythonArgParser<3> parser = PythonArgParser<3>(
        {
            "MaxPool2D(int kernel_size, int strides = None, string padding_mode = \"valid\")",
            "MaxPool2D(IntList kernel_size, IntList strides = None, string padding_mode = \"valid\")",
        },
      args, kwargs);

      parser.parse();

      if (parser.at(0)) {
        if (parser.isNone(1)) {
          self->module = (Module *)(new sail::modules::MaxPool2D(parser.integer(0), parser.integer(0), parser.string(2)));
        } else {
          self->module = (Module *)(new sail::modules::MaxPool2D(parser.integer(0), parser.integer(1), parser.string(2)));
        }
      } else if (parser.at(1)) {
        if (parser.isNone(1)) {
          self->module = (Module *)(new sail::modules::MaxPool2D(parser.int_list(0), parser.int_list(0), parser.string(2)));
        } else {
          self->module = (Module *)(new sail::modules::MaxPool2D(parser.int_list(0), parser.int_list(1), parser.string(2)));
        }
      }

      return 0;
  forward:
    signature: (Tensor x1)

Sigmoid:
  init:
    signature: ()
  forward:
    signature: (Tensor x1)
ReLU:
  init:
    signature: ()
  forward:
    signature: (Tensor x1)
Softmax:
  init:
    signature: (int axis=1)
  forward:
    signature: (Tensor x1)
Tanh:
  init:
    signature: ()
  forward:
    signature: (Tensor x1)