#pragma once

#include <Python.h>
#include <structmember.h>
#include <chrono>
#include <iostream>
#include "../error_defs.h"
#include "../macros.h"
#include "../ops/elementwise.h"
#include "core/Tensor.h"
#include "core/dtypes.h"
#include "core/exception.h"
#include "numpy/arrayobject.h"
#include "py_tensor.h"

/** begin block
 * name = [add, sub, mul, truediv]
 * op = [+, -, *, /]
 */

RETURN_OBJECT PyTensor_$name$(PyObject *t1, PyObject *t2) {
    START_EXCEPTION_HANDLING
    sail::Tensor tensor1;
    sail::Tensor tensor2;

    NUMERIC_PROCESS(t1, t2);

    PyTensor *ret_class;
    ret_class = (PyTensor *)PyTensorType.tp_alloc(&PyTensorType, 0);

    ret_class->tensor = tensor1 $op$ tensor2;

    // SET_BASE(t1, ret_class);

    return (PyObject *)ret_class;
    END_EXCEPTION_HANDLING
}

/** end block **/
